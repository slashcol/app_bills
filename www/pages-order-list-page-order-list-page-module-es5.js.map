{"version":3,"sources":["webpack:///src/app/pages/order-list-page/order-list-page.module.ts","webpack:///src/app/pages/order-list-page/order-list-page.html","webpack:///src/app/pages/order-list-page/order-list-page.ts"],"names":["OrderListPageModule","forChild","path","component","declarations","imports","OrderListPage","injector","orderService","orders","contentLoaded","loadAndScroll","content","ionScroll","length","showLoadingView","showOverlay","loadData","getTrans","title","setPageTitle","setMetaTags","event","refresher","target","load","showContentView","showEmptyView","onRefreshComplete","setTimeout","next","translate","get","subscribe","str","showToast","showErrorView","index","item","id","selector","templateUrl","styleUrls"],"mappings":"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","file":"pages-order-list-page-order-list-page-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { OrderListPage } from './order-list-page';\nimport { SharedModule } from '../../shared.module';\n\n@NgModule({\n  declarations: [\n    OrderListPage,\n  ],\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        component: OrderListPage\n      }\n    ]),\n    SharedModule\n  ],\n})\nexport class OrderListPageModule {}\n","<ion-header class=\"ion-no-border\">\n\n  <ion-toolbar fixed>\n    <ion-buttons slot=\"start\">\n      <ion-back-button></ion-back-button>\n    </ion-buttons>\n    <ion-title>{{ 'MY_ORDERS' | translate }}</ion-title>\n    <ion-buttons slot=\"end\" *ngIf=\"preference.cartCount\">\n      <ion-button fill=\"clear\" (click)=\"goToCartPage()\">\n        <ion-icon slot=\"start\" name=\"cart\"></ion-icon>\n        <span> {{ preference.cartCount }} </span>\n      </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n\n</ion-header>\n\n<ion-content #container scrollEvents=\"true\">\n\n  <ion-refresher slot=\"fixed\" (ionRefresh)=\"loadData($event)\">\n    <ion-refresher-content pullingText=\"{{ 'PULL_TO_REFRESH' | translate }}\"\n      refreshingText=\"{{ 'REFRESHING' | translate }}\">\n    </ion-refresher-content>\n  </ion-refresher>\n\n  <ion-grid fixed>\n\n    <empty-view *ngIf=\"isErrorViewVisible\" icon=\"alert-circle-outline\" [text]=\"'ERROR_DATA' | translate\">\n    </empty-view>\n\n    <empty-view *ngIf=\"isEmptyViewVisible\" image=\"./assets/imgs/undraw_no_data_qbuo.svg\" imageWidth=\"120\"\n      [text]=\"'EMPTY_DATA' | translate\">\n    </empty-view>\n\n    <ion-row class=\"ion-justify-content-center\" *ngIf=\"isContentViewVisible\">\n      <ion-col size-xs=\"12\" size-lg=\"10\">\n        <ion-list lines=\"none\">\n          <ion-list-header>\n            <h5>{{ 'LAST_ORDERS' | translate }}</h5>\n          </ion-list-header>\n          <ion-item class=\"radius ion-margin-vertical\" color=\"light\" *ngFor=\"let order of orders;trackBy:trackByFn\"\n            detail=\"false\" [routerLink]=\"['./' + order.id]\">\n\n            <ion-thumbnail slot=\"start\">\n              <img src=\"./assets/imgs/placeholder.png\" [lazyLoad]=\"order.firstItem.featuredImageThumb?.url()\"\n                [customObservable]=\"loadAndScroll\" />\n            </ion-thumbnail>\n\n            <div class=\"full-width\">\n\n              <ion-row class=\"ion-align-items-center\">\n                <ion-col size-xs=\"12\" size-md=\"9\">\n\n                  <ion-label class=\"ion-text-wrap\">\n                    <p class=\"link ellipsis text-normal\">\n                      {{ order.prettyItems() }}\n                    </p>\n\n                    <ion-text color=\"primary\">\n                      <p class=\"bold\">\n                        <span *ngIf=\"order.status === 'Unpaid'\">{{ 'UNPAID' | translate }}</span>\n                        <span *ngIf=\"order.status === 'Paid'\">{{ 'PAID' | translate }}</span>\n                        <span *ngIf=\"order.status === 'Pending'\">{{ 'PENDING' | translate }}</span>\n                        <span *ngIf=\"order.status === 'In Process'\">{{ 'IN_PROCESS' | translate }}</span>\n                        <span *ngIf=\"order.status === 'Packed'\">{{ 'PACKED' | translate }}</span>\n                        <span *ngIf=\"order.status === 'Shipped Out'\">{{ 'SHIPPED_OUT' | translate }}</span>\n                        <span *ngIf=\"order.status === 'Delivered'\">{{ 'DELIVERED' | translate }}</span>\n                        <span *ngIf=\"order.status === 'Cancelled'\">{{ 'CANCELLED' | translate }}</span>\n                      </p>\n                    </ion-text>\n\n                    <p class=\"text-small\">\n                      {{ order.createdAt | dateGlobal: 'mediumDate' }}\n                    </p>\n                  </ion-label>\n                </ion-col>\n\n                <ion-col size-xs=\"12\" size-md=\"3\">\n                  <ion-button shape=\"round\" color=\"dark\">\n                    {{ 'VIEW' | translate }}\n                    <ion-icon slot=\"end\" name=\"chevron-forward\"></ion-icon>\n                  </ion-button>\n                </ion-col>\n\n              </ion-row>\n\n            </div>\n\n          </ion-item>\n\n        </ion-list>\n      </ion-col>\n    </ion-row>\n\n    <ion-row class=\"ion-margin-vertical ion-justify-content-center\" *ngIf=\"isLoadingViewVisible\">\n      <ion-col size-xs=\"12\" size-lg=\"10\">\n        <ngx-skeleton-loader count=\"12\" [theme]=\"{ 'border-radius': '0', height: '100px' }\">\n        </ngx-skeleton-loader>\n      </ion-col>\n    </ion-row>\n\n  </ion-grid>\n\n</ion-content>","import { Component, Injector, ViewChild } from '@angular/core';\nimport { BasePage } from '../base-page/base-page';\nimport { Order } from '../../services/order';\nimport { Observable, Subject, merge } from 'rxjs';\nimport { IonContent } from '@ionic/angular';\n\n@Component({\n  selector: 'page-order-list-page',\n  templateUrl: 'order-list-page.html',\n  styleUrls: ['order-list-page.scss']\n})\nexport class OrderListPage extends BasePage {\n\n  @ViewChild(IonContent, { static: true }) content: IonContent;\n\n  public orders: Order[] = [];\n\n  public loadAndScroll: Observable<any>;\n  protected contentLoaded: Subject<any>;\n\n  constructor(injector: Injector,\n    private orderService: Order) {\n    super(injector);\n  }\n\n  enableMenuSwipe(): boolean {\n    return false;\n  }\n\n  ngOnInit() {\n    this.contentLoaded = new Subject();\n\n    this.loadAndScroll = merge(\n      this.content.ionScroll,\n      this.contentLoaded\n    );\n  }\n\n  async ionViewDidEnter() {\n\n    if (!this.orders.length) {\n      this.showLoadingView({ showOverlay: false });\n      this.loadData();\n    }\n\n    const title = await this.getTrans('MY_ORDERS');\n    this.setPageTitle(title);\n\n    this.setMetaTags({\n      title: title\n    });\n    \n  }\n\n  async loadData(event: any = {}) {\n\n    try {\n\n      this.refresher = event.target;\n\n      this.orders = await this.orderService.load();\n  \n      if (this.orders.length) {\n        this.showContentView();\n      } else {\n        this.showEmptyView();\n      }\n\n      this.onRefreshComplete(this.orders);\n\n      setTimeout(() => {\n        this.contentLoaded.next();\n      }, 400);\n      \n    } catch (error) {\n      this.translate.get('ERROR_NETWORK').subscribe((str) => this.showToast(str));\n      this.showErrorView();\n    }\n\n  }\n\n  trackByFn(index: number, item: any) {\n    if (!item) return null;\n    return item.id;\n  }\n\n}\n"]}