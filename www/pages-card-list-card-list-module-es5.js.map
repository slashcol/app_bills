{"version":3,"sources":["webpack:///src/app/pages/card-list/card-list.module.ts","webpack:///src/app/pages/card-list/card-list.html","webpack:///src/app/pages/card-list/card-list.ts"],"names":["CardListPageModule","forChild","path","component","declarations","imports","CardListPage","injector","actionSheetCtrl","creditCardService","cards","length","showLoadingView","showOverlay","loadData","getTrans","title","setPageTitle","setMetaTags","event","refresher","target","load","showContentView","showEmptyView","onRefreshComplete","showErrorView","translate","get","subscribe","str","showToast","card","create","header","ACTIONS","buttons","icon","isIos","text","REMOVE","handler","onDeleteCard","CANCEL","actionSheet","present","toPromise","showConfirm","res","destroy","index","indexOf","splice","modalCtrl","modal","dismissLoadingView","onWillDismiss","data","unshift","onAddButtonTouched","selector","templateUrl","styleUrls"],"mappings":"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","file":"pages-card-list-card-list-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CardListPage } from './card-list';\nimport { SharedModule } from '../../shared.module';\nimport { CardAddPageModule } from '../card-add/card-add.module';\n\n@NgModule({\n  declarations: [\n    CardListPage,\n  ],\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        component: CardListPage\n      }\n    ]),\n    SharedModule,\n    CardAddPageModule,\n  ],\n})\nexport class CardListPageModule {}\n","<ion-header class=\"ion-no-border\">\n\n  <ion-toolbar fixed>\n    <ion-buttons slot=\"start\">\n      <ion-back-button></ion-back-button>\n    </ion-buttons>\n    <ion-title>{{ 'PAYMENT' | translate }}</ion-title>\n    <ion-buttons slot=\"end\">\n      <ion-button (click)=\"onAddButtonTouched()\">\n        <ion-icon name=\"add\" slot=\"icon-only\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n\n</ion-header>\n\n<ion-content>\n\n  <ion-refresher slot=\"fixed\" (ionRefresh)=\"loadData($event)\">\n    <ion-refresher-content pullingText=\"{{ 'PULL_TO_REFRESH' | translate }}\"\n      refreshingText=\"{{ 'REFRESHING' | translate }}\">\n    </ion-refresher-content>\n  </ion-refresher>\n\n  <ion-grid fixed>\n\n    <empty-view *ngIf=\"isErrorViewVisible\" icon=\"alert-circle-outline\" [text]=\"'ERROR_DATA' | translate\">\n    </empty-view>\n\n    <empty-view *ngIf=\"isEmptyViewVisible\" image=\"./assets/imgs/undraw_credit_card_df1m.svg\" imageWidth=\"120\"\n      [text]=\"'EMPTY_CARDS' | translate\">\n    </empty-view>\n\n    <ion-row class=\"ion-justify-content-center\" *ngIf=\"isContentViewVisible\">\n      <ion-col size-xs=\"12\" size-lg=\"9\">\n        <ion-list lines=\"none\" class=\"ion-margin-top\">\n          <ion-item class=\"radius ion-margin-bottom\" color=\"light\" *ngFor=\"let card of cards\">\n            <img src=\"./assets/imgs/{{card.formatBrand()}}.png\" width=\"40\" slot=\"start\" />\n            <ion-label>\n              <p>&#8226;&#8226;&#8226;&#8226; {{ card.last4 }}</p>\n              <ion-badge class=\"text-small\" color=\"primary\" *ngIf=\"card.isDefault\">\n                {{ 'DEFAULT' | translate }}\n              </ion-badge>\n            </ion-label>\n            <ion-button fill=\"clear\" color=\"dark\" slot=\"end\" (click)=\"onDeleteCard(card)\">\n              {{ 'DELETE' | translate }}\n            </ion-button>\n          </ion-item>\n        </ion-list>\n      </ion-col>\n    </ion-row>\n\n    <ion-row class=\"ion-margin-vertical ion-justify-content-center\" *ngIf=\"isLoadingViewVisible\">\n      <ion-col size-xs=\"12\" size-lg=\"9\">\n        <ngx-skeleton-loader count=\"12\" [theme]=\"{ 'border-radius': '0', height: '70px' }\">\n        </ngx-skeleton-loader>\n      </ion-col>\n    </ion-row>\n\n  </ion-grid>\n\n</ion-content>","import { Component, Injector } from '@angular/core';\nimport { ActionSheetController } from '@ionic/angular';\nimport { BasePage } from '../base-page/base-page';\nimport { Card } from '../../services/card';\nimport { CardAddPage } from '../card-add/card-add';\n\n@Component({\n  selector: 'page-card-list',\n  templateUrl: 'card-list.html',\n  styleUrls: ['card-list.scss']\n})\nexport class CardListPage extends BasePage {\n\n  public cards: Card[] = [];\n\n  constructor(injector: Injector,\n    private actionSheetCtrl: ActionSheetController,\n    private creditCardService: Card) {\n    super(injector);\n  }\n\n  enableMenuSwipe() {\n    return false;\n  }\n\n  async ionViewDidEnter() {\n\n    if (!this.cards.length) {\n      this.showLoadingView({ showOverlay: false });\n      this.loadData();\n    }\n\n    const title = await this.getTrans('PAYMENT');\n    this.setPageTitle(title);\n\n    this.setMetaTags({\n      title: title\n    });\n    \n  }\n\n  async loadData(event: any = {}) {\n\n    try {\n\n      this.refresher = event.target;\n\n      this.cards = await this.creditCardService.load();\n\n      if (this.cards.length) {\n        this.showContentView();\n      } else {\n        this.showEmptyView();\n      }\n\n      this.onRefreshComplete();\n\n    } catch (err) {\n      this.showErrorView();\n      this.onRefreshComplete();\n      this.translate.get('ERROR_NETWORK').subscribe((str) => this.showToast(str));\n    }\n\n  }\n\n  async presentActionSheet(card: Card) {\n\n    const str = await this.getTrans(['ACTIONS', 'REMOVE', 'CANCEL']);\n\n    const actionSheet = await this.actionSheetCtrl.create({\n      header: str.ACTIONS,\n      buttons: [{\n        icon: !this.isIos() ? 'trash' : null,\n        text: str.REMOVE,\n        handler: () => {\n          this.onDeleteCard(card);\n        }\n      },\n      {\n        icon: !this.isIos() ? 'close' : null,\n        text: str.CANCEL\n      }]\n    });\n    \n    return await actionSheet.present();\n\n  }\n\n  async onDeleteCard(card: Card) {\n\n    try {\n\n      let str = await this.translate.get('DELETE_CONFIRMATION').toPromise();\n      \n      const res = await this.showConfirm(str);\n\n      if (!res) return;\n  \n      await card.destroy();\n\n      let index = this.cards.indexOf(card);\n      if (index !== -1) this.cards.splice(index, 1);\n\n      this.showContentView();\n      this.translate.get('DELETED').subscribe(str => this.showToast(str));\n      \n    } catch (error) {\n      this.showContentView();\n      this.translate.get('ERROR_NETWORK').subscribe(str => this.showToast(str));\n    }\n\n  }\n\n  async onAddButtonTouched() {\n\n    await this.showLoadingView({ showOverlay: true });\n    \n    const modal = await this.modalCtrl.create({\n      component: CardAddPage,\n    });\n\n    await modal.present();\n\n    this.dismissLoadingView();\n\n    const { data } = await modal.onWillDismiss();\n\n    if (data) {\n      this.cards.unshift(data);\n      this.showContentView();\n    }\n  }\n}"]}