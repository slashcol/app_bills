{"version":3,"sources":["webpack:///src/app/pages/address-add/address-add.module.ts","webpack:///src/app/pages/address-add/address-add.html","webpack:///src/app/pages/address-add/address-add.ts","webpack:///src/app/services/customer-address.ts","webpack:///src/app/services/zone.ts"],"names":["AddressAddPageModule","declarations","imports","entryComponents","AddressAddPage","injector","zoneService","customerAddressService","zones","subzones","setupForm","loadZones","form","zone","required","subzone","city","zipcode","address","name","phone","isDefault","modalCtrl","dismiss","load","type","console","warn","message","controls","setValue","parent","value","invalid","translate","get","subscribe","str","showToast","showLoadingView","showOverlay","formData","Object","assign","create","showContentView","onDismiss","onSubmit","onZoneChanged","selector","templateUrl","styleUrls","CustomerAddress","params","obj","save","query","include","equalTo","current","descending","addDescending","find","val","set","providedIn","registerSubclass","Zone","ascending","doesNotExist"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAmBaA,oB;;;;;YAAAA;;;;yBAAAA,oB;AAAoB,O;AAAA,gBATtB,CACP,2DADO,EAEP,0DAFO,EAGP,kEAHO,CASsB;;;;0HAApBA,oB,EAAoB;AAAA,uBAX7B,2DAW6B;AAXf,kBAGd,2DAHc,EAId,0DAJc,EAKd,kEALc;AAWe,O;AANV,K;;;;;sEAMVA,oB,EAAoB;cAbhC,sDAagC;eAbvB;AACRC,sBAAY,EAAE,CACZ,2DADY,CADN;AAIRC,iBAAO,EAAE,CACP,2DADO,EAEP,0DAFO,EAGP,kEAHO,CAJD;AASRC,yBAAe,EAAE,CACf,2DADe;AATT,S;AAauB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACSvB;;AACE;;AACF;;;;;;AAF8C;;AAC5C;;AAAA;;;;;;AAWF;;AACE;;AACF;;;;;;AAFoD;;AAClD;;AAAA;;;;QC9BCC,c;;;;;AAMX,8BAAYC,QAAZ,EACUC,WADV,EAEUC,sBAFV,EAEmD;AAAA;;AAAA;;AACjD,kCAAMF,QAAN;AAFQ,cAAAC,WAAA,GAAAA,WAAA;AACA,cAAAC,sBAAA,GAAAA,sBAAA;AALH,cAAAC,KAAA,GAAgB,EAAhB;AACA,cAAAC,QAAA,GAAmB,EAAnB;AAI4C;AAElD;;;;mCAEU;AACT,eAAKC,SAAL;AACD;;;0CAEc;AACb,iBAAO,KAAP;AACD;;;0CAEiB;AAChB,eAAKC,SAAL;AACD;;;oCAEW;AACV,eAAKC,IAAL,GAAY,IAAI,wDAAJ,CAAc;AACxBC,gBAAI,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,0DAAWC,QAAjC,CADkB;AAExBC,mBAAO,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,0DAAWD,QAAjC,CAFe;AAGxBE,gBAAI,EAAE,IAAI,0DAAJ,CAAgB,EAAhB,EAAoB,0DAAWF,QAA/B,CAHkB;AAIxBG,mBAAO,EAAE,IAAI,0DAAJ,CAAgB,EAAhB,EAAoB,0DAAWH,QAA/B,CAJe;AAKxBI,mBAAO,EAAE,IAAI,0DAAJ,CAAgB,EAAhB,EAAoB,0DAAWJ,QAA/B,CALe;AAMxBK,gBAAI,EAAE,IAAI,0DAAJ,CAAgB,EAAhB,EAAoB,0DAAWL,QAA/B,CANkB;AAOxBM,iBAAK,EAAE,IAAI,0DAAJ,CAAgB,EAAhB,EAAoB,0DAAWN,QAA/B,CAPiB;AAQxBO,qBAAS,EAAE,IAAI,0DAAJ,CAAgB,KAAhB;AARa,WAAd,CAAZ;AAUD;;;oCAE0C;AAAA,cAAjCH,OAAiC,uEAAN,IAAM;AACzC,eAAKI,SAAL,CAAeC,OAAf,CAAuBL,OAAvB;AACD;;;oCAEiB;;;;;;;;AAED,2BAAM,KAAKZ,WAAL,CAAiBkB,IAAjB,CAAsB;AAAEC,0BAAI,EAAE;AAAR,qBAAtB,CAAN;;;AAAb,yBAAKjB,K;;;;;;;AAELkB,2BAAO,CAACC,IAAR,CAAa,YAAMC,OAAnB;;;;;;;;;AAEH;;;wCAEqB;;;;;;;AAElB,yBAAKhB,IAAL,CAAUiB,QAAV,CAAmBd,OAAnB,CAA2Be,QAA3B,CAAoC,IAApC;;AACgB,2BAAM,KAAKxB,WAAL,CAAiBkB,IAAjB,CAAsB;AAAEO,4BAAM,EAAE,KAAKnB,IAAL,CAAUoB,KAAV,CAAgBnB;AAA1B,qBAAtB,CAAN;;;AAAhB,yBAAKJ,Q;;;;;;;AAELiB,2BAAO,CAACC,IAAR,CAAa,aAAMC,OAAnB;;;;;;;;;AAEH;;;mCAEgB;;;;;;;;;yBAEX,KAAKhB,IAAL,CAAUqB,O;;;;;sDACL,KAAKC,SAAL,CAAeC,GAAf,CAAmB,cAAnB,EAAmCC,SAAnC,CAA6C,UAAAC,GAAG;AAAA,6BAAI,MAAI,CAACC,SAAL,CAAeD,GAAf,CAAJ;AAAA,qBAAhD,C;;;;;AAKP,2BAAM,KAAKE,eAAL,CAAqB;AAAEC,iCAAW,EAAE;AAAf,qBAArB,CAAN;;;AAEMC,4B,GAAWC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAK/B,IAAL,CAAUoB,KAA5B,C;;AACD,2BAAM,KAAKzB,sBAAL,CAA4BqC,MAA5B,CAAmCH,QAAnC,CAAN;;;AAAVvB,2B;AAEN,yBAAK2B,eAAL;AACA,yBAAKC,SAAL,CAAe5B,OAAf;;;;;;;AAGA,yBAAK2B,eAAL;AACA,yBAAKX,SAAL,CAAeC,GAAf,CAAmB,eAAnB,EAAoCC,SAApC,CAA8C,UAAAC,GAAG;AAAA,6BAAI,MAAI,CAACC,SAAL,CAAeD,GAAf,CAAJ;AAAA,qBAAjD;;;;;;;;;AAGH;;;;MA/EiC,6D;;;uBAAvBjC,c,EAAc,uH,EAAA,oH,EAAA,2I;AAAA,K;;;YAAdA,c;AAAc,kC;AAAA,0F;AAAA,e;AAAA,c;AAAA,85B;AAAA;AAAA;ADX3B;;AACE;;AACE;;AACE;;AAAyB;AAAA,mBAAS,IAAA0C,SAAA,EAAT;AAAoB,WAApB;;AACvB;;AACF;;AACF;;AACF;;AACF;;AAEA;;AAEE;;AACE;;AACE;;;;AACF;;AACA;;AACF;;AAEA;;AAAyB;AAAA,mBAAY,IAAAC,QAAA,EAAZ;AAAsB,WAAtB;;AACvB;;AAEE;;AACE;;AAAM;;;;AAAwB;;AAChC;;AACA;;AACE;;AAAW;;;;AAAwB;;AACnC;;AAAY;AAAA,mBAAa,IAAAC,aAAA,EAAb;AAA4B,WAA5B;;AACV;;AAGF;;AACF;;AAEA;;AACE;;AAAM;;;;AAA2B;;AACnC;;AACA;;AACE;;AAAW;;;;AAA2B;;AACtC;;AACE;;AAGF;;AACF;;AAEA;;AACE;;AAAM;;;;AAAwB;;AAChC;;AACA;;AACE;;AACF;;AAEA;;AACE;;AAAM;;;;AAA2B;;AACnC;;AACA;;AACE;;AACF;;AAEA;;AACE;;AAAM;;;;AAAoC;;AAC5C;;AACA;;AACE;;AACF;;AAEA;;AACE;;AAAM;;;;AAAgC;;AACxC;;AACA;;AACE;;AACF;;AAEA;;AACE;;AAAM;;;;AAAiC;;AACzC;;AACA;;AACE;;AACF;;AAEA;;AACE;;AACE;;AACE;;;;AACF;;AACF;;AACA;;AACF;;AAEA;;AACE;;AACE;;;;AACF;;AACF;;AAEF;;AACF;;AACF;;;;AApFM;;AAAA;;AAKE;;AAAA;;AAIM;;AAAA;;AAGK;;AAAA;;AAEU;;AAAA;;AAOf;;AAAA;;AAGK;;AAAA;;AAEU;;AAAA;;AAOf;;AAAA;;AAOA;;AAAA;;AAOA;;AAAA;;AAOA;;AAAA;;AAOA;;AAAA;;AASF;;AAAA;;AAQF;;AAAA;;;;;;;;;;sECjFG5C,c,EAAc;cAL1B,uDAK0B;eALhB;AACT6C,kBAAQ,EAAE,aADD;AAETC,qBAAW,EAAE,oBAFJ;AAGTC,mBAAS,EAAE,CAAC,oBAAD;AAHF,S;AAKgB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;ACX3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;QAMaC,e;;;;;AAEX,iCAAc;AAAA;;AAAA,kCACN,iBADM;AAEb;;;;iCAEsB;AAAA,cAAhBC,MAAgB,uEAAF,EAAE;AACrB,cAAMC,GAAG,GAAG,IAAIF,eAAJ,EAAZ;AACA,iBAAOE,GAAG,CAACC,IAAJ,CAASF,MAAT,CAAP;AACD;;;+BAEG;AACF,cAAMG,KAAK,GAAG,IAAI,2CAAJ,CAAgBJ,eAAhB,CAAd;AACAI,eAAK,CAACC,OAAN,CAAc,CAAC,MAAD,EAAS,SAAT,CAAd;AACAD,eAAK,CAACE,OAAN,CAAc,UAAd,EAA0B,2CAAWC,OAAX,EAA1B;AACAH,eAAK,CAACI,UAAN,CAAiB,WAAjB;AACAJ,eAAK,CAACK,aAAN,CAAoB,WAApB;AACA,iBAAOL,KAAK,CAACM,IAAN,EAAP;AACD;;;mCAkEO;AACN,2BAAU,KAAK5C,OAAf,eAA2B,KAAKF,IAAhC,eAAyC,KAAKD,OAAL,CAAaI,IAAtD,eAA+D,KAAKF,OAApE,eAAgF,KAAKJ,IAAL,CAAUM,IAA1F;AACD;;;4BAlEU;AACT,iBAAO,KAAKgB,GAAL,CAAS,SAAT,CAAP;AACD,S;0BAEW4B,G,EAAK;AACf,eAAKC,GAAL,CAAS,SAAT,EAAoBD,GAApB;AACD;;;4BAEO;AACN,iBAAO,KAAK5B,GAAL,CAAS,MAAT,CAAP;AACD,S;0BAEQ4B,G,EAAK;AACZ,eAAKC,GAAL,CAAS,MAAT,EAAiBD,GAAjB;AACD;;;4BAEU;AACT,iBAAO,KAAK5B,GAAL,CAAS,SAAT,CAAP;AACD,S;0BAEW4B,G,EAAK;AACf,eAAKC,GAAL,CAAS,SAAT,EAAoBD,GAApB;AACD;;;4BAEO;AACN,iBAAO,KAAK5B,GAAL,CAAS,MAAT,CAAP;AACD,S;0BAEQ4B,G,EAAK;AACZ,eAAKC,GAAL,CAAS,MAAT,EAAiBD,GAAjB;AACD;;;4BAEU;AACT,iBAAO,KAAK5B,GAAL,CAAS,SAAT,CAAP;AACD,S;0BAEW4B,G,EAAK;AACf,eAAKC,GAAL,CAAS,SAAT,EAAoBD,GAApB;AACD;;;4BAEO;AACN,iBAAO,KAAK5B,GAAL,CAAS,MAAT,CAAP;AACD,S;0BAEQ4B,G,EAAK;AACZ,eAAKC,GAAL,CAAS,MAAT,EAAiBD,GAAjB;AACD;;;4BAEQ;AACP,iBAAO,KAAK5B,GAAL,CAAS,OAAT,CAAP;AACD,S;0BAES4B,G,EAAK;AACb,eAAKC,GAAL,CAAS,OAAT,EAAkBD,GAAlB;AACD;;;4BAEY;AACX,iBAAO,KAAK5B,GAAL,CAAS,WAAT,CAAP;AACD,S;0BAEa4B,G,EAAK;AACjB,eAAKC,GAAL,CAAS,WAAT,EAAsBD,GAAtB;AACD;;;;MAlFkC,4C;;;uBAAxBX,e;AAAe,K;;;aAAfA,e;AAAe,eAAfA,eAAe,K;AAAA,kBAFd;;;;;sEAEDA,e,EAAe;cAH3B,wDAG2B;eAHhB;AACVa,oBAAU,EAAE;AADF,S;AAGgB,Q;;;;;AA0F5B,iDAAaC,gBAAb,CAA8B,iBAA9B,EAAiDd,eAAjD;;;;;;;;;;;;;;;;AChGA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;QAMae,I;;;;;AAEX,sBAAc;AAAA;;AAAA,kCACN,MADM;AAEb;;;;+BAEoB;AAAA,cAAhBd,MAAgB,uEAAF,EAAE;AAEnB,cAAMG,KAAK,GAAG,IAAI,2CAAJ,CAAgBW,IAAhB,CAAd;;AAEA,cAAId,MAAM,CAAC5B,IAAX,EAAiB;AACf+B,iBAAK,CAACE,OAAN,CAAc,MAAd,EAAsBL,MAAM,CAAC5B,IAA7B;AACD;;AAED,cAAI4B,MAAM,CAACtB,MAAX,EAAmB;AACjByB,iBAAK,CAACE,OAAN,CAAc,QAAd,EAAwBL,MAAM,CAACtB,MAA/B;AACD;;AAEDyB,eAAK,CAACY,SAAN,CAAgB,MAAhB;AACAZ,eAAK,CAACE,OAAN,CAAc,UAAd,EAA0B,IAA1B;AACAF,eAAK,CAACa,YAAN,CAAmB,WAAnB;AACA,iBAAOb,KAAK,CAACM,IAAN,EAAP;AACD;;;mCAUO;AACN,iBAAO,KAAK3C,IAAZ;AACD;;;4BAVO;AACN,iBAAO,KAAKgB,GAAL,CAAS,MAAT,CAAP;AACD;;;4BAEM;AACL,iBAAO,KAAKA,GAAL,CAAS,KAAT,CAAP;AACD;;;;MA9BuB,4C;;;uBAAbgC,I;AAAI,K;;;aAAJA,I;AAAI,eAAJA,IAAI,K;AAAA,kBAFH;;;;;sEAEDA,I,EAAI;cAHhB,wDAGgB;eAHL;AACVF,oBAAU,EAAE;AADF,S;AAGK,Q;;;;;AAsCjB,iDAAaC,gBAAb,CAA8B,MAA9B,EAAsCC,IAAtC","file":"default~pages-address-list-address-list-module~pages-checkout-page-checkout-page-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { AddressAddPage } from './address-add';\nimport { SharedModule } from '../../shared.module';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    AddressAddPage,\n  ],\n  imports: [\n    SharedModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  entryComponents: [\n    AddressAddPage\n  ]\n})\nexport class AddressAddPageModule {}\n","<ion-header class=\"ion-no-border\">\n  <ion-toolbar>\n    <ion-buttons slot=\"start\">\n      <ion-button fill=\"clear\" (click)=\"onDismiss()\">\n        <ion-icon name=\"close\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"ion-padding\">\n\n  <ion-text color=\"dark\">\n    <h4 class=\"bold ion-no-margin\">\n      {{ 'SHIPPING_INFO' | translate }}\n    </h4>\n    <div class=\"line\"></div>\n  </ion-text>\n\n  <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" #form1=\"ngForm\" novalidate>\n    <ion-list lines=\"none\">\n\n      <ion-label position=\"stacked\" color=\"medium\">\n        <span>{{ 'ZONE' | translate }}</span>\n      </ion-label>\n      <ion-item class=\"ion-margin-vertical\" lines=\"none\" color=\"light\">\n        <ion-label>{{ 'ZONE' | translate }}</ion-label>\n        <ion-select (ionChange)=\"onZoneChanged()\" formControlName=\"zone\">\n          <ion-select-option *ngFor=\"let zone of zones\" [value]=\"zone\">\n            {{ zone.name }}\n          </ion-select-option>\n        </ion-select>\n      </ion-item>\n\n      <ion-label position=\"stacked\" color=\"medium\">\n        <span>{{ 'SUBZONE' | translate }}</span>\n      </ion-label>\n      <ion-item class=\"ion-margin-vertical\" lines=\"none\" color=\"light\">\n        <ion-label>{{ 'SUBZONE' | translate }}</ion-label>\n        <ion-select formControlName=\"subzone\">\n          <ion-select-option *ngFor=\"let subzone of subzones\" [value]=\"subzone\">\n            {{ subzone.name }}\n          </ion-select-option>\n        </ion-select>\n      </ion-item>\n\n      <ion-label position=\"stacked\" color=\"medium\">\n        <span>{{ 'CITY' | translate }}</span>\n      </ion-label>\n      <ion-item class=\"ion-margin-vertical\" lines=\"none\" color=\"light\">\n        <ion-input type=\"text\" formControlName=\"city\"></ion-input>\n      </ion-item>\n\n      <ion-label position=\"stacked\" color=\"medium\">\n        <span>{{ 'ZIPCODE' | translate }}</span>\n      </ion-label>\n      <ion-item class=\"ion-margin-vertical\" lines=\"none\" color=\"light\">\n        <ion-input type=\"text\" formControlName=\"zipcode\"></ion-input>\n      </ion-item>\n\n      <ion-label position=\"stacked\" color=\"medium\">\n        <span>{{ 'SHIPPING_ADDRESS' | translate }}</span>\n      </ion-label>\n      <ion-item class=\"ion-margin-vertical\" lines=\"none\" color=\"light\">\n        <ion-textarea rows=\"4\" formControlName=\"address\"></ion-textarea>\n      </ion-item>\n\n      <ion-label position=\"stacked\" color=\"medium\">\n        <span>{{ 'CONTACT_NAME' | translate }}</span>\n      </ion-label>\n      <ion-item class=\"ion-margin-vertical\" lines=\"none\" color=\"light\">\n        <ion-input type=\"text\" formControlName=\"name\"></ion-input>\n      </ion-item>\n\n      <ion-label position=\"stacked\" color=\"medium\">\n        <span>{{ 'CONTACT_PHONE' | translate }}</span>\n      </ion-label>\n      <ion-item class=\"ion-margin-vertical\" lines=\"none\" color=\"light\">\n        <ion-input type=\"tel\" formControlName=\"phone\"></ion-input>\n      </ion-item>\n\n      <ion-item class=\"ion-margin-vertical\" lines=\"none\">\n        <ion-label>\n          <span class=\"text-medium\">\n            {{ 'SET_AS_DEFAULT' | translate }}\n          </span>\n        </ion-label>\n        <ion-checkbox slot=\"start\" formControlName=\"isDefault\"></ion-checkbox>\n      </ion-item>\n\n      <div>\n        <ion-button type=\"submit\" shape=\"round\" color=\"primary\" strong>\n          {{ 'SAVE' | translate }}\n        </ion-button>\n      </div>\n\n    </ion-list>\n  </form>\n</ion-content>","import { Component, Injector } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { BasePage } from '../base-page/base-page';\nimport { CustomerAddress } from '../../services/customer-address';\nimport { Zone } from '../../services/zone';\n\n@Component({\n  selector: 'address-add',\n  templateUrl: './address-add.html',\n  styleUrls: ['./address-add.scss']\n})\nexport class AddressAddPage extends BasePage {\n\n  public form: FormGroup;\n  public zones: Zone[] = [];\n  public subzones: Zone[] = [];\n\n  constructor(injector: Injector,\n    private zoneService: Zone,\n    private customerAddressService: CustomerAddress) {\n    super(injector);\n  }\n\n  ngOnInit() {\n    this.setupForm();\n  }\n\n  enableMenuSwipe(): boolean {\n    return false;\n  }\n\n  ionViewDidEnter() {\n    this.loadZones();\n  }\n\n  setupForm() {\n    this.form = new FormGroup({\n      zone: new FormControl(null, Validators.required),\n      subzone: new FormControl(null, Validators.required),\n      city: new FormControl('', Validators.required),\n      zipcode: new FormControl('', Validators.required),\n      address: new FormControl('', Validators.required),\n      name: new FormControl('', Validators.required),\n      phone: new FormControl('', Validators.required),\n      isDefault: new FormControl(false),\n    });\n  }\n\n  onDismiss(address: CustomerAddress = null) {\n    this.modalCtrl.dismiss(address);\n  }\n\n  async loadZones() {\n    try {\n      this.zones = await this.zoneService.load({ type: 'Parent' });\n    } catch (error) {\n      console.warn(error.message);\n    }\n  }\n\n  async onZoneChanged() {\n    try {\n      this.form.controls.subzone.setValue(null);\n      this.subzones = await this.zoneService.load({ parent: this.form.value.zone });\n    } catch (error) {\n      console.warn(error.message);\n    }\n  }\n\n  async onSubmit() {\n\n    if (this.form.invalid) {\n      return this.translate.get('INVALID_FORM').subscribe(str => this.showToast(str));\n    }\n\n    try {\n\n      await this.showLoadingView({ showOverlay: false });\n      \n      const formData = Object.assign({}, this.form.value);\n      const address = await this.customerAddressService.create(formData);\n      \n      this.showContentView();\n      this.onDismiss(address);\n      \n    } catch (error) {\n      this.showContentView();\n      this.translate.get('ERROR_NETWORK').subscribe(str => this.showToast(str));\n    }\n\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport * as Parse from 'parse';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomerAddress extends Parse.Object {\n\n  constructor() {\n    super('CustomerAddress');\n  }\n\n  create(params: any = {}): Promise<CustomerAddress> {\n    const obj = new CustomerAddress();\n    return obj.save(params);\n  }\n\n  load(): Promise<CustomerAddress[]> {\n    const query = new Parse.Query(CustomerAddress);\n    query.include(['zone', 'subzone']);\n    query.equalTo('customer', Parse.User.current());\n    query.descending('isDefault');\n    query.addDescending('createdAt');\n    return query.find();\n  }\n\n  get address(): string {\n    return this.get('address');\n  }\n\n  set address(val) {\n    this.set('address', val);\n  }\n\n  get zone(): any {\n    return this.get('zone');\n  }\n\n  set zone(val) {\n    this.set('zone', val);\n  }\n\n  get subzone(): any {\n    return this.get('subzone');\n  }\n\n  set subzone(val) {\n    this.set('subzone', val);\n  }\n\n  get city(): string {\n    return this.get('city');\n  }\n\n  set city(val) {\n    this.set('city', val);\n  }\n\n  get zipcode(): string {\n    return this.get('zipcode');\n  }\n\n  set zipcode(val) {\n    this.set('zipcode', val);\n  }\n\n  get name(): string {\n    return this.get('name');\n  }\n\n  set name(val) {\n    this.set('name', val);\n  }\n\n  get phone(): string {\n    return this.get('phone');\n  }\n\n  set phone(val) {\n    this.set('phone', val);\n  }\n\n  get isDefault(): boolean {\n    return this.get('isDefault');\n  }\n\n  set isDefault(val) {\n    this.set('isDefault', val);\n  }\n\n  toString(): string {\n    return `${this.address}, ${this.city}, ${this.subzone.name}, ${this.zipcode}, ${this.zone.name}`;\n  }\n\n}\n\nParse.Object.registerSubclass('CustomerAddress', CustomerAddress);\n\n","import { Injectable } from '@angular/core';\nimport * as Parse from 'parse';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Zone extends Parse.Object {\n\n  constructor() {\n    super('Zone');\n  }\n\n  load(params: any = {}): Promise<Zone[]> {\n\n    const query = new Parse.Query(Zone);\n\n    if (params.type) {\n      query.equalTo('type', params.type)\n    }\n\n    if (params.parent) {\n      query.equalTo('parent', params.parent)\n    }\n\n    query.ascending('name');\n    query.equalTo('isActive', true);\n    query.doesNotExist('deletedAt');\n    return query.find();\n  }\n\n  get name(): string {\n    return this.get('name');\n  }\n\n  get fee(): number {\n    return this.get('fee');\n  }\n\n  toString(): string {\n    return this.name;\n  }\n\n}\n\nParse.Object.registerSubclass('Zone', Zone);\n\n"]}